/*global require, module */
/*jslint white: true */


(function ( fs, path, slug, moment ) {

	'use strict';


	var readPost, parse, metadataPattern, months, parseMarkdown, metadataUnpackers, breakStr;

	parseMarkdown = require( 'node-markdown' ).Markdown;

	metadataPattern = /^```([^`]+)```/;
	breakStr = '<!-- break -->';

	metadataUnpackers = {
		date: function ( date ) {
			return moment( date );
		},
		tags: function ( str ) {
			return str.split( ',' ).map( function ( tag ) {
				return {
					name: tag.trim(),
					slug: slug( tag )
				};
			});
		},
		caption: function ( caption ) {
			return parseMarkdown( caption );
		}
	};

	readPost = function ( data, relPath ) {

		var post, metadata, match, markdown, html, pathParts, id, i, index, key, value, breakIndex;

		pathParts = relPath.split( path.sep );
		id = pathParts[ pathParts.length - 1 ].replace( '.md', '' );

		post = { id: id };

		// read metadata
		match = metadataPattern.exec( data );

		if ( !match ) {
			throw 'Bad metadata for file "' + relPath + '" - regex did not match';
		}

		metadata = match[1].split( '\n' );

		i = metadata.length;
		while ( i-- ) {
			index = metadata[i].indexOf( ':' );

			if ( index === -1 ) {
				continue;
			}

			key = metadata[i].substr( 0, index ).trim();
			value = metadata[i].substring( index + 1 ).trim();

			if ( key in metadataUnpackers ) {
				value = metadataUnpackers[ key ]( value );
			}

			post[ key ] = value;
		}

		post.path = relPath.replace( /\.md/, '' ) + '.html';

		markdown = data.substring( match[0].length ).trim();
		html = parseMarkdown( markdown );

		// do we have a preview?
		breakIndex = markdown.indexOf( breakStr );
		if ( breakIndex !== -1 ) {
			post.previewMarkdown = markdown.substr( 0, breakIndex );
			post.previewHtml = parseMarkdown( post.previewMarkdown );
		} else {
			post.previewMarkdown = markdown;
			post.previewHtml = html;
		}

		post.markdown = markdown;
		post.html = html;

		return post;
	};

	module.exports = readPost;

}( require( 'fs' ), require( 'path' ), require( 'slug' ), require( 'moment' ) ) );
