/*jslint white: true */
/*global module, require */

module.exports = function ( grunt ) {

	'use strict';

	var isArray;

	isArray = function ( arr ) {
		return Object.prototype.toString.call( arr ) === '[object Array]';
	};

	grunt.registerMultiTask( 'generate', 'Generate static pages', function () {

		var path, mustache, data, options, helpers, render, partials;

		path = require( 'path' );
		mustache = require( 'mustache' );

		options = this.options();
		data = grunt.file.readJSON( options.data );

		helpers = {};

		render = function ( template, content ) {
			return mustache.render( template, content || {}, data.partials );
		};

		this.files.forEach( function ( file ) {
			var cwd = file.cwd;

			file.src.forEach( function ( src ) {
				var absPath, generator, pageData, generatedPath, pathParts;

				absPath = path.resolve( './' + cwd + src );
				generator = require( absPath );

				pageData = generator( data, helpers, render );

				// single-page generators
				if ( !isArray( pageData ) ) {
					generatedPath = ( file.dest + src ).replace( /\.js$/, '' ) + '.html';

					grunt.log.writeln( 'Writing file: ' + generatedPath );
					grunt.file.write( generatedPath, pageData );
				}

				// multi-page generators
				else {
					pageData.forEach( function ( page ) {
						var generatedPath, pathParts, sep;

						sep = path.sep;

						pathParts = ( file.dest + src ).split( sep );
						pathParts.pop();

						generatedPath = [ pathParts.join( sep ), page.path ].join( sep );

						grunt.log.writeln( 'Writing file: ' + generatedPath );
						grunt.file.write( generatedPath, page.data );
					});
				}
			});
		});
	});
};