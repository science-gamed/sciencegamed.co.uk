module.exports = function ( grunt ) {
	
	var readPost, metadataPattern, parseMarkdown, render, months, path;

	path = require( 'path' );

	metadataPattern = /^```([^`]+)```/;

	parseMarkdown = require( 'node-markdown' ).Markdown;

	months = [
		null,
		'jan',
		'feb',
		'mar',
		'apr',
		'may',
		'jun',
		'jul',
		'aug',
		'sep',
		'oct',
		'nov',
		'dec'
	];

	readPost = require( 'readPost' );

	render = function ( template, data ) {
		var pattern, match, rendered;

		pattern = /\{\{([a-z]+)\}\}/g;

		rendered = template.replace( pattern, function ( match, key ) {
			var value = data[ key ];

			if ( !value ) {
				console.warn( 'Missing metadata for "' + data.id + '" (' + key + ')' );
				return '';
			}

			return data[ key ];
		});

		return rendered;
	};


	grunt.registerTask( 'generator', 'Generate static pages', function () {
		var fs, config, files, posts, post, i, template, subfolder;

		grunt.config.requires( 'generate.blog.posts' );

		fs = require( 'fs' );
		config = grunt.config( 'generate.blog.posts' );

		template = grunt.file.read( config.template );

		files = grunt.file.expand( config.src );
		posts = [];

		// get all posts
		i = files.length;
		while ( i-- ) {
			posts[i] = readPost( files[i], grunt.file.read( files[i] ) );
		}

		grunt.file.write( 'tmp/posts.json', JSON.stringify( posts, null, '\t' ) );

		// turn posts into pages
		create = function ( i ) {
			var post, rendered, date, year, month, day, path;

			post = posts[i];

			date = post.date;
			if ( !post.date ) {
				throw 'Blog post "' + post.id + '" is missing a date';
			}

			path = '/' + post.year + '/' + months[ post.month ] + '/' + post.id + '.html';


			rendered = render( template, post );

			console.log( 'Writing: ' + config.dest + path );
			grunt.file.write( config.dest + path, rendered );


		};

		i = posts.length;
		while ( i-- ) {
			create( i );
		}
	});

};