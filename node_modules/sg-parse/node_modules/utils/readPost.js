/*global require, module */
/*jslint white: true */

var parse, metadataPattern, months, path, parseMarkdown, readDate, fs, getPath, metadataParsers, getSlug;

path = require( 'path' );
parseMarkdown = require( 'node-markdown' ).Markdown;
readDate = require( 'utils/readDate' );
fs = require( 'fs' );
getPath = require( 'utils/getPath' );
getSlug = require( 'utils/getSlug' );

metadataPattern = /^```([^`]+)```/;

metadataParsers = {
	date: readDate,
	tags: function ( str ) {
		var tags = str.split( ',' ).map( function ( tag ) {
			return {
				name: tag.trim(),
				slug: getSlug( tag )
			};
		});

		return tags;
	}
};

readPost = function ( filename ) {
	
	'use strict';

	var post, metadata, match, markdown, html, pathParts, id, i, index, key, value, data;

	data = fs.readFileSync( filename ).toString();

	pathParts = filename.split( path.sep );
	id = pathParts[ pathParts.length - 1 ].replace( '.md', '' );

	post = { id: id };

	// read metadata
	match = metadataPattern.exec( data );

	if ( !match ) {
		throw 'Bad metadata for file "' + filename + '" - regex did not match';
	}

	metadata = match[1].split( '\n' );

	i = metadata.length;
	while ( i-- ) {
		index = metadata[i].indexOf( ':' );
		
		if ( index === -1 ) {
			continue;
		}
		
		key = metadata[i].substr( 0, index ).trim();
		value = metadata[i].substring( index + 1 ).trim();

		if ( key in metadataParsers ) {
			value = metadataParsers[ key ]( value );
		}

		post[ key ] = value;
	}

	if ( post.date ) {
		post.path = getPath( post );
	}

	markdown = data.substring( match[0].length ).trim();
	html = parseMarkdown( markdown );

	post.markdown = markdown;
	post.html = html;

	return post;
};


module.exports = readPost;